{
	"info": {
		"_postman_id": "fb49d68d-f9e8-4480-87e7-9353e034d8fe",
		"name": "Prepare_for_TEST_INT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "3558839-fb49d68d-f9e8-4480-87e7-9353e034d8fe"
	},
	"item": [
		{
			"name": "Get and Validate all Policy Actions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "152c65ea-3b73-4354-87b7-ea12ddb02d9e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let policyActions = JSON.parse(responseBody).policyAction;\r",
							"if (policyActions === undefined || policyActions === null || policyActions.length === 0) {\r",
							"} else {\r",
							"    for (i in policyActions) {\r",
							"        if ((policyActions[i].templateKey === \"logInvocation\") && (policyActions[i].id !== \"GlobalLogInvocationPolicyAction\")) {\r",
							"            console.log(\"Log Invocation policy not allowed on API level\");\r",
							"            console.log(\"ID: \" + policyActions[i].id);\r",
							"            console.log(\"Name: \" + policyActions[i].names[0].value);\r",
							"\r",
							"            pm.test(\"No local Log Invocation policies\", function () {\r",
							"                pm.expect(policyActions[i].templateKey).not.to.be.equal(\"logInvocation\");\r",
							"            });\r",
							"\r",
							"            pm.execution.setNextRequest(null);\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2e3fcd51-ce68-467c-8eac-31afb416e24d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/policyActions",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"policyActions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get and Validate all Applications",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cbbeda0-3746-4b67-8409-4cfc5b7f197c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let applications = apiResponse.applications;\r",
							"if (applications === undefined || applications === null || applications.length === 0) {\r",
							"} else {\r",
							"    for (i in applications) {\r",
							"        if (!(applications[i].name.endsWith(\"_DESIGN\") || applications[i].name.endsWith(\"_DEV\")\r",
							"                || applications[i].name.endsWith(\"_TEST\") || applications[i].name.endsWith(\"_TEST\")\r",
							"                || applications[i].name.endsWith(\"_PROD\"))) {\r",
							"            console.log(\"Application name must end with _ plus environment name\");\r",
							"            console.log(\"ID: \" + applications[i].id);\r",
							"            console.log(\"Name: \" + applications[i].name);\r",
							"            console.log(\"Version: \" + applications[i].version);\r",
							"            console.log(\"Description: \" + applications[i].description);\r",
							"\r",
							"            pm.test(\"Application name end with _ plus environment name\", function () {\r",
							"                pm.expect.fail(\"Application name does not end with _ plus environment name: \" + applications[i].name);\r",
							"            });\r",
							"\r",
							"            pm.execution.setNextRequest(null);\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "7e0777a7-c674-4dae-bc55-a1871135e840",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/applications",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Aliases",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23f31e38-baf9-4c7d-8ea5-253d5732c4ef",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let aliasesString = pm.variables.get(\"aliases\");\r",
							"let globalAliasesString = pm.variables.get(\"globalAliases\");\r",
							"\r",
							"// console.log(\"aliases Postman variable: \" + aliasesString);\r",
							"// console.log(\"globalAliases Postman variable: \" + globalAliasesString);\r",
							"\r",
							"let oldAliases = JSON.parse(responseBody).alias;\r",
							"\r",
							"let aliasIds = [];\r",
							"let remainingAliases = [];\r",
							"pm.execution.setNextRequest(\"Get all Applications\");\r",
							"\r",
							"if (aliasesString !== undefined && aliasesString !== null && aliasesString !== \"\") {\r",
							"    let aliases = JSON.parse(aliasesString);\r",
							"\r",
							"//    console.log(\"Parsed aliases Postman variable: \" + JSON.stringify(aliases));\r",
							"\r",
							"    if (aliases.length > 0) {\r",
							"        for (var i=0; i<aliases.length; i++) { // Check aliases\r",
							"            if (aliases[i] != undefined && aliases[i] != null\r",
							"                && aliases[i].id != undefined && aliases[i].id != null\r",
							"                && aliases[i].content != undefined && aliases[i].content != null\r",
							"                && aliases[i].content.name != undefined && aliases[i].content.name != null) {\r",
							"\r",
							"                let aliasId = aliases[i].id;\r",
							"\r",
							"//                console.log(\"Alias ID to be checked: \" + aliasId);\r",
							"\r",
							"                if (aliasIds.includes(aliasId)) {\r",
							"                    console.log(\"Duplicate alias definition!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias definition must be unique\", function () {\r",
							"                        pm.expect(aliasIds).not.to.include(aliasId);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    pm.execution.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"\r",
							"                let matchingaliases = oldAliases.filter(alias => alias.id === aliasId);\r",
							"\r",
							"//                console.log(\"Matching aliases: \" + JSON.stringify(matchingaliases));\r",
							"\r",
							"                if (matchingaliases.length === 0) { // No alias found\r",
							"                    console.log(\"No matching alias found!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    pm.execution.setNextRequest(null);\r",
							"                    break;\r",
							"                } else if (matchingaliases.length === 1) { // One alias found\r",
							"//                    console.log(\"Found!\");\r",
							"\r",
							"                    if (matchingaliases[0].name !== aliases[i].content.name) {\r",
							"                        console.log(\"Names do not match!\");\r",
							"                        console.log(\"ID: \" + aliases[i].id);\r",
							"                        console.log(\"Name: \" + aliases[i].content.name);\r",
							"                        console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                        pm.test(\"Alias to be updated must have the same name\", function () {\r",
							"                            pm.expect(matchingaliases[0].name).to.be.equal(aliases[i].content.name);\r",
							"                        });\r",
							"\r",
							"                        remainingAliases = null;\r",
							"                        pm.execution.setNextRequest(null);\r",
							"                        break;\r",
							"                    } else {\r",
							"                        remainingAliases.push(aliases[i]);\r",
							"                        aliasIds.push(aliases[i].id);\r",
							"                        pm.execution.setNextRequest(\"Update one Alias\");\r",
							"                    }\r",
							"                } else { // More than one alias found\r",
							"                    console.log(\"More than one matching alias found!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    pm.execution.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"            } else {\r",
							"\t\t\t\tif (aliases[i] === undefined || aliases[i] === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias definition!\");\r",
							"\t\t\t\t} else if (aliases[i].id === undefined || aliases[i].id === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias ID!\");\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(aliases[i]));\r",
							"\t\t\t\t} else if (aliases[i].content === undefined || aliases[i].content === null) { // no value defined for this alias on this stage, not an error case!\r",
							"\t\t\t\t\tcontinue; // Just skip this alias\r",
							"\t\t\t\t} else if (aliases[i].content.name === undefined || aliases[i].content.name === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias name!\");\r",
							"\t\t\t\t\tconsole.log(\"ID: \" + aliases[i].id);\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(aliases[i]));\r",
							"\t\t\t\t}\r",
							"\r",
							"                pm.test(\"Consistent alias definition with id and name\", function () {\r",
							"                    pm.expect.fail(\"Inconsistent alias definition: Missing alias or missing id or missing content.name\");\r",
							"                });\r",
							"\r",
							"                remainingAliases = null;\r",
							"                pm.execution.setNextRequest(null);\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"if (remainingAliases !== null && globalAliasesString !== undefined && globalAliasesString !== null && globalAliasesString !== \"\") {\r",
							"    let globalAliases = JSON.parse(globalAliasesString);\r",
							"\r",
							"//    console.log(\"Parsed globalAliases Postman variable: \" + JSON.stringify(globalAliases));\r",
							"\r",
							"    if (globalAliases.length > 0) {\r",
							"        for (var i=0; i<globalAliases.length; i++) { // Check aliases\r",
							"            if (globalAliases[i] != undefined && globalAliases[i] != null\r",
							"                && globalAliases[i].id != undefined && globalAliases[i].id != null\r",
							"                && globalAliases[i].content != undefined && globalAliases[i].content != null\r",
							"                && globalAliases[i].content.name != undefined && globalAliases[i].content.name != null) {\r",
							"\r",
							"                let aliasId = globalAliases[i].id;\r",
							"\r",
							"//                console.log(\"Alias ID to be checked: \" + aliasId);\r",
							"\r",
							"                if (aliasIds.includes(aliasId)) {\r",
							"                    console.log(\"Duplicate alias definition!\");\r",
							"                    console.log(\"ID: \" + globalAliases[i].id);\r",
							"                    console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                    console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias definition must be unique\", function () {\r",
							"                        pm.expect(aliasIds).not.to.include(aliasId);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    pm.execution.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"\r",
							"                let matchingaliases = oldAliases.filter(alias => alias.id === aliasId);\r",
							"\r",
							"//                console.log(\"Matching aliases: \" + JSON.stringify(matchingaliases));\r",
							"\r",
							"                if (matchingaliases.length === 0) { // No alias found, no error for global aliases\r",
							"//                    console.log(\"Not found!\");\r",
							"                } else if (matchingaliases.length === 1) { // One alias found\r",
							"//                    console.log(\"Found!\");\r",
							"\r",
							"                    if (matchingaliases[0].name !== globalAliases[i].content.name) {\r",
							"                        console.log(\"Names do not match!\");\r",
							"                        console.log(\"ID: \" + globalAliases[i].id);\r",
							"                        console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                        console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                        pm.test(\"Alias to be updated must have the same name\", function () {\r",
							"                            pm.expect(matchingaliases[0].name).to.be.equal(globalAliases[i].content.name);\r",
							"                        });\r",
							"\r",
							"                        remainingAliases = null;\r",
							"                        pm.execution.setNextRequest(null);\r",
							"                        break;\r",
							"                    } else {\r",
							"                        remainingAliases.push(globalAliases[i]);\r",
							"                        aliasIds.push(globalAliases[i].id);\r",
							"                        pm.execution.setNextRequest(\"Update one Alias\");\r",
							"                    }\r",
							"                } else { // More than one alias found\r",
							"                    console.log(\"More than one matching alias found!\");\r",
							"                    console.log(\"ID: \" + globalAliases[i].id);\r",
							"                    console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                    console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    pm.execution.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"            } else {\r",
							"\t\t\t\tif (globalAliases[i] === undefined || globalAliases[i] === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias definition!\");\r",
							"\t\t\t\t} else if (globalAliases[i].id === undefined || globalAliases[i].id === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias ID!\");\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(globalAliases[i]));\r",
							"\t\t\t\t} else if (globalAliases[i].content === undefined || globalAliases[i].content === null) { // no value defined for this alias on this stage, not an error case!\r",
							"\t\t\t\t\tcontinue; // Just skip this alias\r",
							"\t\t\t\t} else if (globalAliases[i].content.name === undefined || globalAliases[i].content.name === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias name!\");\r",
							"\t\t\t\t\tconsole.log(\"ID: \" + globalAliases[i].id);\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(globalAliases[i]));\r",
							"\t\t\t\t}\r",
							"\r",
							"                pm.test(\"Consistent alias definition with id and name\", function () {\r",
							"                    pm.expect.fail(\"Inconsistent alias definition: Missing alias or missing id or missing content.name\");\r",
							"                });\r",
							"\r",
							"                remainingAliases = null;\r",
							"                pm.execution.setNextRequest(null);\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"if (remainingAliases !== null && remainingAliases.length > 0) {\r",
							"    let alias = remainingAliases.shift();\r",
							"    let aliasId = alias.id;\r",
							"    let aliasContent = alias.content;\r",
							"\r",
							"    remainingAliasesString = JSON.stringify(remainingAliases);\r",
							"    let aliasContentString = JSON.stringify(aliasContent);\r",
							"\r",
							"    console.log(\"Update alias\");\r",
							"    console.log(\"ID: \" + aliasId);\r",
							"    console.log(\"Name: \" + aliasContent.name);\r",
							"    console.log(\"Description: \" + aliasContent.description);\r",
							"\r",
							"    pm.globals.set(\"remainingAliases\", remainingAliasesString);\r",
							"    pm.globals.set(\"aliasContent\", aliasContentString);\r",
							"    pm.globals.set(\"aliasId\", aliasId);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "256835a9-d1a6-46ce-9544-2a9e0bc4b67a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/alias",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one Alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e41ed0f-177a-4b49-8c64-fe33f7f7524f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let aliasesString = pm.variables.get(\"remainingAliases\");\r",
							"\r",
							"// console.log(\"aliases Postman variable: \" + aliasesString);\r",
							"\r",
							"if (aliasesString === undefined || aliasesString === null || aliasesString === \"\") {\r",
							"    pm.execution.setNextRequest(\"Get all Applications\");\r",
							"} else {\r",
							"    let aliases = JSON.parse(aliasesString);\r",
							"\r",
							"//    console.log(\"Parsed aliases Postman variable: \" + JSON.stringify(aliases));\r",
							"\r",
							"    if (aliases.length === 0) {\r",
							"        pm.execution.setNextRequest(\"Get all Applications\");\r",
							"    } else {\r",
							"        let alias = aliases.shift();\r",
							"        let aliasId = alias.id;\r",
							"        let aliasContent = alias.content;\r",
							"\r",
							"        aliasesString = JSON.stringify(aliases);\r",
							"        let aliasContentString = JSON.stringify(aliasContent);\r",
							"\r",
							"        console.log(\"Update alias\");\r",
							"        console.log(\"ID: \" + aliasId);\r",
							"        console.log(\"Name: \" + aliasContent.name);\r",
							"        console.log(\"Description: \" + aliasContent.description);\r",
							"\r",
							"        pm.globals.set(\"remainingAliases\", aliasesString);\r",
							"        pm.globals.set(\"aliasContent\", aliasContentString);\r",
							"        pm.globals.set(\"aliasId\", aliasId);\r",
							"\r",
							"        pm.execution.setNextRequest(\"Update one Alias\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1a750c24-6996-4a21-bf5f-f78f86936cd9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{aliasContent}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/alias/{{aliasId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"{{aliasId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Applications",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "902f6a8a-d2b2-4d5b-b449-30d0bfef154f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let applications = apiResponse.applications;\r",
							"if (applications === undefined || applications === null || applications.length === 0) {\r",
							"    pm.execution.setNextRequest(\"Get all Strategies\");\r",
							"} else {\r",
							"    let applicationsToBeDeleted = applications.filter(function(application, index, arr){ \r",
							"        return !(application.name.endsWith(\"_TEST\"));\r",
							"    });\r",
							"    if (applicationsToBeDeleted.length === 0) {\r",
							"        let applicationsToBeUnsuspended = applications.filter(function(application, index, arr){ \r",
							"            return (application.isSuspended === true);\r",
							"        });\r",
							"        if (applicationsToBeUnsuspended.length === 0) {\r",
							"            pm.execution.setNextRequest(\"Get all Strategies\");\r",
							"        } else {\r",
							"            pm.globals.set(\"applicationId\", applicationsToBeUnsuspended[0].id);\r",
							"\r",
							"            console.log(\"Unsuspend application\");\r",
							"            console.log(\"ID: \" + applicationsToBeUnsuspended[0].id);\r",
							"            console.log(\"Name: \" + applicationsToBeUnsuspended[0].name);\r",
							"            console.log(\"Version: \" + applicationsToBeUnsuspended[0].version);\r",
							"\r",
							"            pm.execution.setNextRequest(\"Unsuspend one Application\");\r",
							"        }\r",
							"    } else {\r",
							"        pm.globals.set(\"applicationId\", applicationsToBeDeleted[0].id);\r",
							"\r",
							"        console.log(\"Delete application\");\r",
							"        console.log(\"ID: \" + applicationsToBeDeleted[0].id);\r",
							"        console.log(\"Name: \" + applicationsToBeDeleted[0].name);\r",
							"        console.log(\"Version: \" + applicationsToBeDeleted[0].version);\r",
							"\r",
							"        pm.execution.setNextRequest(\"Delete one Application\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "65756c80-0b96-4bec-980c-68146c5f4eb4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/applications",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete one Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "710f606d-849e-4b80-b93c-d8de6373cd29",
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"if (pm.response.code === 204) {\r",
							"    pm.execution.setNextRequest(\"Get all Applications\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0080c20e-ebd4-4c54-ac9d-565aa7633a07",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/applications/{{applicationId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications",
						"{{applicationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuspend one Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a34a8e6-7e99-42c1-84c7-44499eddcefc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.execution.setNextRequest(\"Get all Applications\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0e6a7697-ae17-4834-ae4b-04e5b81a879b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"isSuspended\": false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/applications/{{applicationId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications",
						"{{applicationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Strategies",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d29e39f-a532-48af-8d9a-b9b76a87a0e1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let strategies = apiResponse.strategies;\r",
							"if (strategies === undefined || strategies === null || strategies.length === 0) {\r",
							"    pm.execution.setNextRequest(\"Get all APIs\"); // nothing to do, no strategies.\r",
							"} else {\r",
							"    // strategies[0] will be handled here, the other strategies will be deferred to next request.\r",
							"    let remainingStrategies = [];\r",
							"    for (var i=1; i<strategies.length; i++) { \r",
							"        remainingStrategies.push(strategies[i])\r",
							"    }    \r",
							"    pm.globals.set(\"remainingStrategies\", JSON.stringify(remainingStrategies))\r",
							"    \r",
							"    console.log(\"Sanitize strategy - remove dcrConfig.ClientId and dcrConfig.clientSecret\");\r",
							"    console.log(\"ID: \" + strategies[0].id);\r",
							"    console.log(\"Name: \" + strategies[0].name);\r",
							"    console.log(\"Decription: \" + strategies[0].description);\r",
							"    delete strategies[0].dcrConfig.clientId;\r",
							"    delete strategies[0].dcrConfig.clientSecret;\r",
							"\r",
							"    pm.globals.set(\"strategyContent\", JSON.stringify(strategies[0]));\r",
							"    pm.globals.set(\"strategyId\", strategies[0].id)\r",
							"    \r",
							"    pm.execution.setNextRequest(\"Update one Strategy\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b5c46805-b887-40d8-a962-659bb2a0366d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/strategies",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"strategies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one Strategy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09b64e15-14fc-4957-a604-46a07daebfb3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let strategies = JSON.parse(pm.variables.get(\"remainingStrategies\"));\r",
							"\r",
							"if (strategies === undefined || strategies === null || strategies.length === 0) {\r",
							"    pm.execution.setNextRequest(\"Get all APIs\"); //es ist nichts (mehr) zu tun, alle strategies wurden abgearbeitet\r",
							"} else {\r",
							"    // strategies[0] will be handled here, the other strategies will be deferred to next request.\r",
							"    let remainingStrategies = [];\r",
							"    for (var i=1; i<strategies.length; i++) { \r",
							"        remainingStrategies.push(strategies[i])\r",
							"    }    \r",
							"    pm.globals.set(\"remainingStrategies\", JSON.stringify(remainingStrategies))\r",
							"    \r",
							"    console.log(\"Sanitize strategy - remove dcrConfig.ClientId and dcrConfig.clientSecret\");\r",
							"    console.log(\"ID: \" + strategies[0].id);\r",
							"    console.log(\"Name: \" + strategies[0].name);\r",
							"    console.log(\"Decription: \" + strategies[0].description);\r",
							"    delete strategies[0].dcrConfig.clientId;\r",
							"    delete strategies[0].dcrConfig.clientSecret;\r",
							"\r",
							"    pm.globals.set(\"strategyContent\", JSON.stringify(strategies[0]));\r",
							"    pm.globals.set(\"strategyId\", strategies[0].id)\r",
							"    \r",
							"    pm.execution.setNextRequest(\"Update one Strategy\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e475854d-a20f-4d17-8e23-d28c3c250a71",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{strategyContent}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/strategies/{{strategyId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"strategies",
						"{{strategyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all APIs",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21399bc9-e29f-422b-9509-ee235ae5a72a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"let apis = JSON.parse(responseBody).apiResponse;\r",
							"if (apis === undefined || apis === null || apis.length === 0 || apis[0].responseStatus === \"NOT_FOUND\") {\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    let apiIds = apis.map(api => api.api.id);\r",
							"    let apiId = apiIds.pop();\r",
							"    let apiIdsString = JSON.stringify(apiIds);\r",
							"    pm.globals.set(\"apiIds\", apiIdsString);\r",
							"    pm.globals.set(\"apiId\", apiId);\r",
							"    pm.execution.setNextRequest(\"Get and Validate one API\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e78102ab-16a8-4e60-9dd8-ef16e3615f11",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/apis",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get and Validate one API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0aeb132c-e27b-432e-840a-1b5b2207735f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"let api = JSON.parse(responseBody).apiResponse.api;\r",
							"if (api === undefined || api === null || api.apiDefinition === undefined || api.apiDefinition === null) {\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    if (api.apiGroups === undefined || api.apiGroups === null || api.apiGroups.length === 0) { // API invalid\r",
							"        console.log(\"API must be assigned to one or more API groups\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"        console.log(\"Description: \" + api.apiDescription);\r",
							"\r",
							"        pm.test(\"API assigned to one or more API groups\", function () {\r",
							"            pm.expect.fail(\"API not assigned to an API group\");\r",
							"        });\r",
							"\r",
							"        pm.execution.setNextRequest(null);\r",
							"    } else if (api.apiGroups === undefined || api.apiGroups === null || !api.apiGroups.includes(\"Internal\")) { // API invalid\r",
							"        console.log(\"API must be assigned to API group Internal\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"        console.log(\"Description: \" + api.apiDescription);\r",
							"\r",
							"        pm.test(\"API assigned to API group Internal\", function () {\r",
							"            pm.expect.fail(\"API not assigned to API group Internal\");\r",
							"        });\r",
							"\r",
							"        pm.execution.setNextRequest(null);\r",
							"    } else { // API valid\r",
							"        let commitId_short = pm.variables.get(\"commitId\").substring(0,7);\r",
							"        api.apiDefinition.tags = api.apiDefinition.tags || [];\r",
							"        api.apiDefinition.tags.push({\"name\":\"Pipeline: {{definitionName}}\"});\r",
							"        api.apiDefinition.tags.push({\"name\":\"Build: {{buildId}}\"});\r",
							"        api.apiDefinition.tags.push({\"name\":\"Commit: {{commitId}}\"});\r",
							"\r",
							"        api.apiDefinition.apiTags = api.apiDefinition.apiTags || [];\r",
							"        // api.apiDefinition.apiTags.push(\"Pipeline: https://dev.azure.com/pswm-inno-api-management/azure-demo/_build?definitionId={{definitionId}}\");\r",
							"        // api.apiDefinition.apiTags.push(\"Build: https://dev.azure.com/pswm-inno-api-management/azure-demo/_build/results?buildId={{buildId}}\");\r",
							"        // api.apiDefinition.apiTags.push(\"Commit: {{repoUrl}}/commit/{{commitId}}\");\r",
							"        // api.apiDefinition.apiTags.push(\"Pipeline (definitionId): {{definitionId}}\");\r",
							"        // api.apiDefinition.apiTags.push(\"Pipeline (definitionName): {{definitionName}}\");\r",
							"        // api.apiDefinition.apiTags.push(\"Pipeline (definitionVersion): {{definitionVersion}}\");\r",
							"        api.apiDefinition.apiTags.push(\"Pipeline: {{definitionName}}\");\r",
							"        api.apiDefinition.apiTags.push(\"Build: {{buildId}}\");\r",
							"        api.apiDefinition.apiTags.push(\"Commit: \" + commitId_short);\r",
							"\r",
							"        api.apiDescription = api.apiDescription ? api.apiDescription : \"\";\r",
							"\r",
							"        api.apiDescription = \"[Pipeline: {{definitionName}}]({{projectUrl}}/_build?definitionId={{definitionId}}) [Build: {{buildId}}]({{projectUrl}}/_build/results?buildId={{buildId}}) [Commit: \" + commitId_short + \"]({{repoUrl}}/commit/{{commitId}})\\n\\n\" + api.apiDescription\r",
							"\r",
							"        let apiString = JSON.stringify(api);\r",
							"        pm.globals.set(\"api\", apiString);\r",
							"\r",
							"        console.log(\"Update API\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"\r",
							"        pm.execution.setNextRequest(\"Update one API\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8e80a952-b766-4398-ac50-b59b46082842",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/apis/{{apiId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis",
						"{{apiId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f2b255b-f0a9-4a9b-99b2-9af90c712741",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiResponse\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains api\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiDefinition\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains tags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition.tags).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiTags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition.apiTags).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"tags set to: \" + JSON.stringify(pm.response.json().apiResponse.api.apiDefinition.tags));\r",
							"console.log(\"apiTags set to: \" + JSON.stringify(pm.response.json().apiResponse.api.apiDefinition.apiTags));\r",
							"\r",
							"pm.execution.setNextRequest(null);\r",
							"\r",
							"let apiIds = JSON.parse(pm.globals.get(\"apiIds\"));\r",
							"if (apiIds === undefined || apiIds === null || apiIds.length === 0) {\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    let apiId = apiIds.pop();\r",
							"    let apiIdsString = JSON.stringify(apiIds);\r",
							"    pm.globals.set(\"apiIds\", apiIdsString);\r",
							"    pm.globals.set(\"apiId\", apiId);\r",
							"    pm.execution.setNextRequest(\"Get and Validate one API\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6cbc1b20-4428-40b8-813d-2f61a08d6546",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{api}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/apis/{{apiId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis",
						"{{apiId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{preparer_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{preparer_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "f3a9502f-f230-4bb7-8395-1885a94c1e24"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "b936d5d6-ee73-4300-8e2a-46787c8f59c6"
			}
		}
	]
}