{
	"info": {
		"_postman_id": "2c100308-932c-4ae3-b5b2-8f25d4cfa54d",
		"name": "Initialize_TEST_EXT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "3558839-2c100308-932c-4ae3-b5b2-8f25d4cfa54d"
	},
	"item": [
		{
			"name": "Get loadbalancer configuration",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f4d5eec-14e8-41b0-8785-717e8becd1c7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response contains httpsUrls\", function () {\r",
							"    pm.expect(jsonData.httpsUrls).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains httpUrls\", function () {\r",
							"    pm.expect(jsonData.httpUrls).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains websocketUrls\", function () {\r",
							"    pm.expect(jsonData.websocketUrls).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"HTTP Loadbalancer URL initial value: \" + pm.response.json().httpUrls);\r",
							"console.log(\"HTTPS Loadbalancer URL initial value: \" + pm.response.json().httpsUrls);\r",
							"console.log(\"WebSocket Loadbalancer URL initial value: \" + pm.response.json().websocketUrls);\r",
							"\r",
							"var requestList = [ null ];\r",
							"\r",
							"var setLoadbalancerUrls = false;\r",
							"\r",
							"var httpUrlsString = pm.variables.get(\"http_loadbalancer_urls\");\r",
							"if (httpUrlsString == null || httpUrlsString == undefined) {\r",
							"    var httpUrls = jsonData.httpUrls;\r",
							"} else if (httpUrlsString == \"\") {\r",
							"    var httpUrls = [];\r",
							"    setLoadbalancerUrls = true;\r",
							"} else {\r",
							"    var httpUrls = httpUrlsString.split(\",\");\r",
							"    setLoadbalancerUrls = true;\r",
							"}\r",
							"pm.variables.set(\"httpUrls\", JSON.stringify(httpUrls));\r",
							"\r",
							"var httpsUrlsString = pm.variables.get(\"https_loadbalancer_urls\");\r",
							"if (httpsUrlsString == null || httpsUrlsString == undefined) {\r",
							"    var httpsUrls = jsonData.httpsUrls;\r",
							"} else if (httpsUrlsString == \"\") {\r",
							"    var httpsUrls = [];\r",
							"    setLoadbalancerUrls = true;\r",
							"} else {\r",
							"    var httpsUrls = httpsUrlsString.split(\",\");\r",
							"    setLoadbalancerUrls = true;\r",
							"}\r",
							"pm.variables.set(\"httpsUrls\", JSON.stringify(httpsUrls));\r",
							"\r",
							"var websocketUrlsString = pm.variables.get(\"websocket_loadbalancer_urls\");\r",
							"if (websocketUrlsString == null || websocketUrlsString == undefined) {\r",
							"    var websocketUrls = jsonData.websocketUrls;\r",
							"} else if (websocketUrlsString == \"\") {\r",
							"    var websocketUrls = [];\r",
							"    setLoadbalancerUrls = true;\r",
							"} else {\r",
							"    var websocketUrls = websocketUrlsString.split(\",\");\r",
							"    setLoadbalancerUrls = true;\r",
							"}\r",
							"pm.variables.set(\"websocketUrls\", JSON.stringify(websocketUrls));\r",
							"\r",
							"if (setLoadbalancerUrls) {\r",
							"    requestList.push(\"Put loadbalancer configuration\")\r",
							"}\r",
							"\r",
							"let elasticsearchHostname = pm.variables.get(\"elasticsearch_hostname\");\r",
							"if (!(elasticsearchHostname == null || elasticsearchHostname == undefined)) {\r",
							"    requestList.push(\"Put Elasticsearch destination configuration\");\r",
							"}\r",
							"\r",
							"let httpsProxyHost = pm.variables.get(\"https_proxy_host\");\r",
							"let httpsProxyPort = pm.variables.get(\"https_proxy_port\");\r",
							"if (!(httpsProxyHost == null || httpsProxyHost == undefined || httpsProxyPort == null || httpsProxyPort == undefined)) {\r",
							"    requestList.push(\"Update HTTPS_Proxy\");\r",
							"}\r",
							"\r",
							"pm.variables.set(\"requestList\", JSON.stringify(requestList));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bbeeb139-9688-4f4b-8e86-1571624e2e1a",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "85a2c8a3-2bcd-4d2e-9d3e-8a9d6033c153",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"websocketUrls\": {{websocketUrls}},\r\n    \"httpsUrls\": {{httpsUrls}},\r\n    \"httpUrls\": {{httpUrls}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/configurations/loadBalancer",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"configurations",
						"loadBalancer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get local OAuth2 Authorization Server alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76b7564a-3f31-4b99-8b6f-a7ef136e7634",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let alias = JSON.parse(responseBody).alias;\r",
							"if (alias === undefined || alias === null) {\r",
							"    var requestList = JSON.parse(pm.variables.get(\"requestList\"));\r",
							"    pm.execution.setNextRequest(requestList.pop());\r",
							"    pm.variables.set(\"requestList\", JSON.stringify(requestList));    \r",
							"} else {\r",
							"    alias.localIntrospectionConfig = alias.localIntrospectionConfig || {};\r",
							"    alias.localIntrospectionConfig.issuer = \"https://\" + pm.variables.get(\"hostname\");\r",
							"\r",
							"    alias.tokenGeneratorConfig = alias.tokenGeneratorConfig || {};\r",
							"    alias.tokenGeneratorConfig.accessTokenExpInterval = 3600;\r",
							"    alias.tokenGeneratorConfig.authCodeExpInterval = 60;\r",
							"    alias.tokenGeneratorConfig.expiry = 60;\r",
							"    alias.tokenGeneratorConfig.algorithm = \"RS512\";\r",
							"\r",
							"    alias.sslConfig = alias.sslConfig || {};\r",
							"    alias.sslConfig.keyStoreAlias = \"DEFAULT_IS_KEYSTORE\";\r",
							"    alias.sslConfig.keyAlias = \"ssos\";\r",
							"\r",
							"    let aliasString = JSON.stringify(alias);\r",
							"    pm.globals.set(\"alias\", aliasString);\r",
							"    pm.execution.setNextRequest(\"Update local OAuth2 Authorization Server alias\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0c542fd-cd3f-4096-8bc1-7acb5f6a450d",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7d9b444a-3c6b-44f4-b393-7a08bad8a2bc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/alias/local",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"local"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update local OAuth2 Authorization Server alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4a61c78-6a83-4385-aff2-d60978885ae3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains alias\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains localIntrospectionConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.localIntrospectionConfig).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains tokenGeneratorConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.tokenGeneratorConfig).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains sslConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.sslConfig).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"JWT issuer set to: \" + pm.response.json().alias.localIntrospectionConfig.issuer);\r",
							"console.log(\"JWT access token expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.expiry);\r",
							"console.log(\"JWT signing algorithm set to: \" + pm.response.json().alias.tokenGeneratorConfig.algorithm);\r",
							"console.log(\"JWT keystore alias set to: \" + pm.response.json().alias.sslConfig.keyStoreAlias);\r",
							"console.log(\"JWT key alias set to: \" + pm.response.json().alias.sslConfig.keyAlias);\r",
							"\r",
							"console.log(\"OAuth2 access token expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.accessTokenExpInterval);\r",
							"console.log(\"Auth code expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.authCodeExpInterval);\r",
							"\r",
							"var requestList = JSON.parse(pm.variables.get(\"requestList\"));\r",
							"pm.execution.setNextRequest(requestList.pop());\r",
							"pm.variables.set(\"requestList\", JSON.stringify(requestList));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4973a72c-e2d9-4009-b214-5b1c0e628c0a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{alias}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/alias/local",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"local"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put loadbalancer configuration",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eeb5e021-ec38-455d-954f-2500d3ee3b6a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains httpsUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.httpsUrls).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains httpUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.httpUrls).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains websocketUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.websocketUrls).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"HTTP Loadbalancer URL set to: \" + pm.response.json().httpUrls);\r",
							"console.log(\"HTTPS Loadbalancer URL set to: \" + pm.response.json().httpsUrls);\r",
							"console.log(\"WebSocket Loadbalancer URL set to: \" + pm.response.json().websocketUrls);\r",
							"\r",
							"var requestList = JSON.parse(pm.variables.get(\"requestList\"));\r",
							"pm.execution.setNextRequest(requestList.pop());\r",
							"pm.variables.set(\"requestList\", JSON.stringify(requestList));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8e31965d-eed4-48c4-bd8a-09e8a13a22ee",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7a3853ad-dd05-4ace-89b0-4555101e6e45",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"websocketUrls\": {{websocketUrls}},\r\n    \"httpsUrls\": {{httpsUrls}},\r\n    \"httpUrls\": {{httpUrls}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/configurations/loadBalancer",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"configurations",
						"loadBalancer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put Elasticsearch destination configuration",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "427d0e6a-4087-4d76-ace5-14a916ccc2d1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains hostname\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hostName).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"Elasticsearch hostname set to: \" + pm.response.json().hostName);\r",
							"\r",
							"var requestList = JSON.parse(pm.variables.get(\"requestList\"));\r",
							"pm.execution.setNextRequest(requestList.pop());\r",
							"pm.variables.set(\"requestList\", JSON.stringify(requestList));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3ce02af2-4d18-424d-8998-8900936b5c4c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"hostName\": \"{{elasticsearch_hostname}}\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"keystoreName\": \"\",\r\n    \"protocol\": \"{{elasticsearch_protocol}}\",\r\n    \"password\": \"{{elasticsearch_password}}\",\r\n    \"sendAuditlogRuleManagementEvent\": \"true\",\r\n    \"truststoreName\": \"\",\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendAuditlogAccessControlListManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"indexName\": \"{{elasticsearch_indexname}}\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"userName\": \"{{elasticsearch_user}}\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"port\": \"{{elasticsearch_port}}\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"keystoreAlias\": \"\",\r\n    \"metricsPublishInterval\": \"5\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/configurations/elasticsearchDestinationConfig",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"configurations",
						"elasticsearchDestinationConfig"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update HTTPS_Proxy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e07e345-1bf3-45eb-b939-a1f33430a01b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var requestList = JSON.parse(pm.variables.get(\"requestList\"));\r",
							"pm.execution.setNextRequest(requestList.pop());\r",
							"pm.variables.set(\"requestList\", JSON.stringify(requestList));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6b650405-8704-466b-90dd-9b75c3439e29",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"proxyAlias\": \"HTTPS_Proxy\",\r\n    \"host\": \"{{https_proxy_host}}\",\r\n    \"port\": \"{{https_proxy_port}}\",\r\n    \"username\": null,\r\n    \"password\": null,\r\n    \"protocol\": \"HTTPS\",\r\n    \"isDefault\": \"Y\",\r\n    \"status\": \"Enabled\",\r\n    \"ftpType\": \"0\",\r\n    \"socksVersion\": \"5\",\r\n    \"passwordHandle\": null,\r\n    \"caller\": \"Administrator\",\r\n    \"entityId\": \"HTTPS_Proxy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}:{{port}}/rest/apigateway/is/outboundproxy/HTTPS_Proxy",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"is",
						"outboundproxy",
						"HTTPS_Proxy"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{initializer_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{initializer_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "4a92e565-5c08-40a1-a3ff-5abfd3d0256a"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "94ef7d85-bf87-4f69-970f-374367797f97"
			}
		}
	]
}