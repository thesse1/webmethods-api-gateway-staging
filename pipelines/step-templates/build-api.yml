parameters:
- name: api_project
- name: build_environment_file
- name: build_stage_name
- name: build_environment_name
- name: target_stage_name
- name: prepare_condition
- name: test_condition
- name: replace_condition
- name: environment_set

steps:
- task: qetza.replacetokens.replacetokens-task.replacetokens@5
  displayName: 'Replace tokens with variable values in assets'
  inputs:
    targetFiles: '$(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/assets/**/*'
    actionOnMissing: fail
  condition: ${{parameters.replace_condition}}

- task: qetza.replacetokens.replacetokens-task.replacetokens@5
  displayName: 'Replace tokens with variable values in local aliases.json'
  inputs:
    targetFiles: '$(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/aliases.json'
    actionOnMissing: fail
  condition: and(succeeded(), ${{parameters.replace_condition}})

- bash: cat $(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/aliases.json || echo File not found
  displayName: Log local aliases.json after value substitution
  condition: and(succeeded(), ${{parameters.replace_condition}})

- task: qetza.replacetokens.replacetokens-task.replacetokens@5
  displayName: 'Replace tokens with variable values in global aliases.json'
  inputs:
    targetFiles: '$(System.DefaultWorkingDirectory)/apis/aliases.json'
    actionOnMissing: fail
  condition: and(succeeded(), ${{parameters.replace_condition}})

- bash: cat $(System.DefaultWorkingDirectory)/apis/aliases.json || echo File not found
  displayName: Log global aliases.json after value substitution
  condition: and(succeeded(), ${{parameters.replace_condition}})

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/assets'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_import.zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Create the API Deployable from the flat representation for API project ${{parameters.api_project}}'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_import.zip'
    artifactName: '${{parameters.target_stage_name}}_${{parameters.api_project}}_build_input'
  displayName: 'Publish the API Deployable to pipeline build'

- bash: |
   echo "##vso[task.setvariable variable=build_environment_protocol]`jq -r '.values[] | select(.key == "protocol") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
   echo "##vso[task.setvariable variable=build_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
   echo "##vso[task.setvariable variable=build_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
   echo "##vso[task.setvariable variable=build_environment_port]`jq -r '.values[] | select(.key == "port") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
   echo "##vso[task.setvariable variable=build_environment_insecure_flag]`jq -r '.values[] | select(.key == "insecure_flag") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
   echo "##vso[task.setvariable variable=build_environment_api_insecure_flag]`jq -r '.values[] | select(.key == "api_insecure_flag") | .value' environments/${{parameters.environment_set}}/${{parameters.build_environment_file}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.build_environment_name}} configuration, extract protocol, ip, hostname, port and insecure_flag'

- bash: |
    newman run postman/collections/utilities/prepare/Prepare_${{parameters.build_stage_name}}.json --reporters cli \
    --env-var preparer_user='$(preparer_user)' \
    --env-var preparer_password='$(preparer_password)' \
    -e environments/${{parameters.environment_set}}/${{parameters.build_environment_file}} \
    $(build_environment_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Delete all APIs, applications, strategies, scopes and aliases on API Gateway ${{parameters.build_environment_name}}'
  env:
    no_proxy: $(build_environment_ip)

- bash: |
    echo "##vso[task.setvariable variable=scopes]`jq -c '.' $(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/scopes.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of scopes to be imported'

- bash: |
    newman run postman/collections/utilities/import/Import_API.json --reporters cli \
    --env-var importer_user='$(importer_user)' \
    --env-var importer_password='$(importer_password)' \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var scopes='$(scopes)' \
    --env-var file_Loc=$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_import.zip \
    -e environments/${{parameters.environment_set}}/${{parameters.build_environment_file}} \
    $(build_environment_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Import the Deployable To API Gateway ${{parameters.build_environment_name}}'
  env:
    no_proxy: $(build_environment_ip)

- bash: |
    newman run postman/collections/api_tests/${{parameters.api_project}}/API_Test.json --reporters cli,junit --reporter-junit-export apis/${{parameters.api_project}}/junitReport.xml \
    -e environments/${{parameters.environment_set}}/${{parameters.build_environment_file}} \
    $(build_environment_api_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Run tests on API Gateway ${{parameters.build_environment_name}}'
  env:
    no_proxy: $(build_environment_ip)
  condition: and(succeeded(), ${{parameters.test_condition}})

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/junitReport.xml'
    artifactName: '${{parameters.target_stage_name}}_${{parameters.api_project}}_test_results'
  condition: ${{parameters.test_condition}}

# - task: FileTransform@1
#   displayName: 'Replace alias values using pipeline variables'
#   inputs:
#     folderPath: '$(System.DefaultWorkingDirectory)/**/'
#     targetFiles: '**/aliases.json'
#     fileType: json

- bash: |
    echo "##vso[task.setvariable variable=aliases]`jq -c '[.[] | {id: .id, content: ."${{parameters.target_stage_name}}"}]' $(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/aliases.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of project-specific aliases to be updated'

- bash: |
    echo "##vso[task.setvariable variable=globalAliases]`jq -c '[.[] | {id: .id, content: ."${{parameters.target_stage_name}}"}]' $(System.DefaultWorkingDirectory)/apis/aliases.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of global aliases to be updated'

- bash: |
    newman run postman/collections/utilities/prepare/Prepare_for_${{parameters.target_stage_name}}.json --reporters cli \
    --env-var preparer_user='$(preparer_user)' \
    --env-var preparer_password='$(preparer_password)' \
    --env-var buildId=$(Build.BuildId) \
    --env-var buildNumber='$(Build.BuildNumber)' \
    --env-var definitionId='$(System.DefinitionId)' \
    --env-var definitionName='$(Build.DefinitionName)' \
    --env-var definitionVersion='$(Build.DefinitionVersion)' \
    --env-var repoName='$(Build.Repository.Name)' \
    --env-var repoUrl='$(Build.Repository.Uri)' \
    --env-var projectUrl='$(System.CollectionUri)$(System.TeamProject)' \
    --env-var commitId='$(Build.SourceVersion)' \
    --env-var aliases='$(aliases)' \
    --env-var globalAliases='$(globalAliases)' \
    -e environments/${{parameters.environment_set}}/${{parameters.build_environment_file}} \
    $(build_environment_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Validate and prepare assets for ${{parameters.target_stage_name}}: Validate policy actions, application names and API groupings, update aliases, delete all unwanted applications, unsuspend all remaining applications, add build details as tags to APIs'
  env:
    no_proxy: $(build_environment_ip)
  condition: and(succeeded(), ${{parameters.prepare_condition}})

- bash: |
   curl $(build_environment_insecure_flag) \
          -d @"apis/${{parameters.api_project}}/export_payload.json" \
          --output $(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_export.zip \
          -H "x-HTTP-Method-Override:GET" -H "Content-Type:application/json" \
          --user '$(exporter_user)':'$(exporter_password)' \
          $(build_environment_protocol)://$(build_environment_hostname):$(build_environment_port)/rest/apigateway/archive
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Export the Deployable from API Gateway ${{parameters.build_environment_name}}'
  env:
    no_proxy: $(build_environment_hostname)

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_export.zip'
#     artifactName: '${{parameters.target_stage_name}}_${{parameters.api_project}}'
#   displayName: 'Publish build result to pipeline build'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' 
    testResultsFiles: '$(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/junitReport.xml'
    testRunTitle: 'QA environment test results for ${{parameters.api_project}}_${{parameters.target_stage_name}}'
    publishRunAttachments: false
  condition: ${{parameters.test_condition}}