parameters:
- name: api_project
- name: target_environment_file
- name: target_stage_name
- name: environment_set

steps:
- bash: |
   echo "##vso[task.setvariable variable=target_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' environments/${{parameters.environment_set}}/${{parameters.target_environment_file}}`"
   echo "##vso[task.setvariable variable=target_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' environments/${{parameters.environment_set}}/${{parameters.target_environment_file}}`"
   echo "##vso[task.setvariable variable=target_environment_port]`jq -r '.values[] | select(.key == "port") | .value' environments/${{parameters.environment_set}}/${{parameters.target_environment_file}}`"
   echo "##vso[task.setvariable variable=target_environment_insecure_flag]`jq -r '.values[] | select(.key == "insecure_flag") | .value' environments/${{parameters.environment_set}}/${{parameters.target_environment_file}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.target_stage_name}} configuration, extract ip, hostname, port and insecure_flag'

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_export.zip'
#     artifactName: '${{parameters.target_stage_name}}_${{parameters.api_project}}_deploy_import'
#   displayName: 'Publish build result to pipeline build'

- bash: |
    echo "##vso[task.setvariable variable=scopes]`jq -c '.' $(System.DefaultWorkingDirectory)/apis/${{parameters.api_project}}/scopes.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of scopes to be imported'

- bash: |
    newman run postman/collections/utilities/import/Import_API.json --reporters cli \
    --env-var importer_user='$(importer_user)' \
    --env-var importer_password='$(importer_password)' \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var scopes='$(scopes)' \
    --env-var file_Loc=$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_stage_name}}_${{parameters.api_project}}_export.zip \
    -e environments/${{parameters.environment_set}}/${{parameters.target_environment_file}} \
    $(target_environment_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Import the Deployable To API Gateway ${{parameters.target_stage_name}}'
  env:
    no_proxy: $(target_environment_ip)

- bash: echo `echo -n [ && ls -mQ apis/${{parameters.api_project}}/assets/API && echo -n ]` | jq -c . > apis_to_be_published.txt
  displayName: 'Generate API list as JSON array'

- bash: |
    newman run postman/collections/utilities/publish/Republish_APIs.json --reporters cli \
    --env-var publisher_user='$(publisher_user)' \
    --env-var publisher_password='$(publisher_password)' \
    --env-var apis_to_be_published=`cat apis_to_be_published.txt` \
    -e environments/${{parameters.environment_set}}/${{parameters.target_environment_file}} \
    $(target_environment_insecure_flag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Republish all ${{parameters.api_project}} APIs from API Gateway ${{parameters.target_stage_name}}'
  env:
    no_proxy: $(target_environment_ip)